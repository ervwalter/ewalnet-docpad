<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Flurl</name>
    </assembly>
    <members>
        <member name="M:Flurl.Util.CommonExtensions.ToKeyValuePairs(System.Object)">
            <summary>
            Converts an object's public properties to a collection of string-based key-value pairs. If the object happens
            to be an IDictionary, the IDictionary's keys and values converted to strings and returned.
            </summary>
            <param name="obj">The object to parse into key-value pairs</param>
            <returns></returns>
        </member>
        <member name="T:Flurl.QueryParamCollection">
            <summary>
            Represents a URL query string as a key-value dictionary. Insertion order is preserved.
            </summary>
        </member>
        <member name="M:Flurl.QueryParamCollection.Parse(System.String)">
            <summary>
            Parses a query string from a URL to a QueryParamCollection dictionary.
            </summary>
            <param name="queryString">The query string to parse.</param>
            <returns></returns>
        </member>
        <member name="M:Flurl.QueryParamCollection.ToString">
            <summary>
            Returns serialized, encoded query string. Insertion order is preserved.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Flurl.StringExtensions">
            <summary>
            A set of string extension methods for working with Flurl URLs
            </summary>
        </member>
        <member name="M:Flurl.StringExtensions.IsUrl(System.String)">
            <summary>
            Checks if a string is a well-formed URL.
            </summary>
            <param name="s">The string to check</param>
            <returns>true if s is a well-formed URL</returns>
        </member>
        <member name="M:Flurl.StringExtensions.AppendPathSegment(System.String,System.String)">
            <summary>
            Converts string to a Url object and appends a segment to the URL path, 
            ensuring there is one and only one '/' character as a seperator.
            </summary>
            <param name="segment">The segment to append</param>
            <returns>the resulting Url object</returns>
        </member>
        <member name="M:Flurl.StringExtensions.AppendPathSegments(System.String,System.String[])">
            <summary>
            Appends multiple segments to the URL path, ensuring there is one and only one '/' character as a seperator.
            </summary>
            <param name="segments">The segments to append</param>
            <returns>the Url object with the segments appended</returns>
        </member>
        <member name="M:Flurl.StringExtensions.AppendPathSegments(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends multiple segments to the URL path, ensuring there is one and only one '/' character as a seperator.
            </summary>
            <param name="segments">The segments to append</param>
            <returns>the Url object with the segments appended</returns>
        </member>
        <member name="M:Flurl.StringExtensions.SetQueryParam(System.String,System.String,System.Object)">
            <summary>
            Converts string to a Url object and adds a parameter to the query string, overwriting the value if name exists.
            </summary>
            <param name="name">name of query string parameter</param>
            <param name="value">value of query string parameter</param>
            <returns>The Url obect with the query string parameter added</returns>
        </member>
        <member name="M:Flurl.StringExtensions.SetQueryParams(System.String,System.Object)">
            <summary>
            Converts string to a Url object, parses values object into name/value pairs, and adds them to the query string,
            overwriting any that already exist.
            </summary>
            <param name="values">Typically an anonymous object, ie: new { x = 1, y = 2 }</param>
            <returns>The Url object with the query string parameters added</returns>
        </member>
        <member name="M:Flurl.StringExtensions.RemoveQueryParam(System.String,System.String)">
            <summary>
            Converts string to a Url object and removes a name/value pair from the query string by name.
            </summary>
            <param name="name">Query string parameter name to remove</param>
            <returns>The Url object with the query string parameter removed</returns>
        </member>
        <member name="M:Flurl.StringExtensions.RemoveQueryParams(System.String,System.String[])">
            <summary>
            Converts string to a Url object and removes multiple name/value pairs from the query string by name.
            </summary>
            <param name="names">Query string parameter names to remove</param>
            <returns>The Url object with the query string parameters removed</returns>
        </member>
        <member name="M:Flurl.StringExtensions.RemoveQueryParams(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts string to a Url object and removes multiple name/value pairs from the query string by name.
            </summary>
            <param name="names">Query string parameter names to remove</param>
            <returns>The Url object with the query string parameters removed</returns>
        </member>
        <member name="M:Flurl.StringExtensions.ResetToRoot(System.String)">
            <summary>
            Trims the URL to its root, including the scheme, any user info, host, and port (if specified).
            </summary>
            <returns>A Url object.</returns>
        </member>
        <member name="T:Flurl.Url">
            <summary>
            Represents a URL that can be built fluently
            </summary>
        </member>
        <member name="M:Flurl.Url.#ctor(System.String)">
            <summary>
            Constructs a Url object from a string.
            </summary>
            <param name="baseUrl">The URL to use as a starting point (required)</param>
        </member>
        <member name="M:Flurl.Url.Combine(System.String,System.String[])">
            <summary>
            Basically a Path.Combine for URLs. Ensures exactly one '/' character is used to seperate each segment.
            URL-encodes illegal characters but not reserved characters.
            </summary>
            <param name="url">The URL to use as a starting point (required).</param>
            <param name="segments">Paths to combine.</param>
            <returns></returns>
        </member>
        <member name="M:Flurl.Url.GetRoot(System.String)">
            <summary>
            Returns the root URL of the given full URL, including the scheme, any user info, host, and port (if specified).
            </summary>
        </member>
        <member name="M:Flurl.Url.CleanSegment(System.String)">
            <summary>
            Encodes characters that are illegal in a URL path, including '?'. Does not encode reserved characters, i.e. '/', '+', etc.
            </summary>
            <param name="segment"></param>
            <returns></returns>
        </member>
        <member name="M:Flurl.Url.AppendPathSegment(System.String)">
            <summary>
            Appends a segment to the URL path, ensuring there is one and only one '/' character as a seperator.
            </summary>
            <param name="segment">The segment to append</param>
            <param name="encode">If true, URL-encode the segment where necessary</param>
            <returns>the Url object with the segment appended</returns>
        </member>
        <member name="M:Flurl.Url.AppendPathSegments(System.String[])">
            <summary>
            Appends multiple segments to the URL path, ensuring there is one and only one '/' character as a seperator.
            </summary>
            <param name="segments">The segments to append</param>
            <returns>the Url object with the segments appended</returns>
        </member>
        <member name="M:Flurl.Url.AppendPathSegments(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Appends multiple segments to the URL path, ensuring there is one and only one '/' character as a seperator.
            </summary>
            <param name="segments">The segments to append</param>
            <returns>the Url object with the segments appended</returns>
        </member>
        <member name="M:Flurl.Url.SetQueryParam(System.String,System.Object)">
            <summary>
            Adds a parameter to the query string, overwriting the value if name exists.
            </summary>
            <param name="name">name of query string parameter</param>
            <param name="value">value of query string parameter</param>
            <returns>The Url obect with the query string parameter added</returns>
        </member>
        <member name="M:Flurl.Url.SetQueryParams(System.Object)">
            <summary>
            Parses values (usually an anonymous object or dictionary) into name/value pairs and adds them to the query string, overwriting any that already exist.
            </summary>
            <param name="values">Typically an anonymous object, ie: new { x = 1, y = 2 }</param>
            <returns>The Url object with the query string parameters added</returns>
        </member>
        <member name="M:Flurl.Url.RemoveQueryParam(System.String)">
            <summary>
            Removes a name/value pair from the query string by name.
            </summary>
            <param name="name">Query string parameter name to remove</param>
            <returns>The Url object with the query string parameter removed</returns>
        </member>
        <member name="M:Flurl.Url.RemoveQueryParams(System.String[])">
            <summary>
            Removes multiple name/value pairs from the query string by name.
            </summary>
            <param name="names">Query string parameter names to remove</param>
            <returns>The Url object with the query string parameters removed</returns>
        </member>
        <member name="M:Flurl.Url.RemoveQueryParams(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Removes multiple name/value pairs from the query string by name.
            </summary>
            <param name="names">Query string parameter names to remove</param>
            <returns>The Url object with the query string parameters removed</returns>
        </member>
        <member name="M:Flurl.Url.ResetToRoot">
            <summary>
            Resets the URL to its root, including the scheme, any user info, host, and port (if specified).
            </summary>
            <returns>The Url object trimmed to its root.</returns>
        </member>
        <member name="M:Flurl.Url.ToString">
            <summary>
            Converts this Url object to its string representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Flurl.Url.op_Implicit(Flurl.Url)~System.String">
            <summary>
            Implicit conversion from Url to String.
            </summary>
            <param name="url">the Url object</param>
            <returns>The string</returns>
        </member>
        <member name="M:Flurl.Url.op_Implicit(System.String)~Flurl.Url">
            <summary>
            Implicit conversion from String to Url.
            </summary>
            <param name="url">the String representation of the URL</param>
            <returns>The string</returns>
        </member>
        <member name="P:Flurl.Url.Path">
            <summary>
            The full absolute path part of the URL (everthing except the query string).
            </summary>
        </member>
        <member name="P:Flurl.Url.QueryParams">
            <summary>
            Collection of all query string parameters.
            </summary>
        </member>
    </members>
</doc>
